
    public IEntry getDataSet(String searchingKey, String givenKey, Character givenValue) {
        for (DataSet dataSet : dataSets) {
            for (String key : dataSet.getEntries().keySet()) {
                if (key.equals(searchingKey)) {
                    if (dataSet.getEntry(givenKey) != null) {
                        if (dataSet.getEntry(givenKey) instanceof CharacterEntry) {
                            StringEntry entry = (StringEntry) dataSet.getEntry(givenKey);
                            if (entry.getValue().equals(givenValue)) {
                                return dataSet.getEntry(searchingKey);
                            }
                        }
                    }
                }
            }
        }
        return null;
    }

    public IEntry getDataSet(String searchingKey, String givenKey, boolean givenValue) {
        for (DataSet dataSet : dataSets) {
            for (String key : dataSet.getEntries().keySet()) {
                if (key.equals(searchingKey)) {
                    if (dataSet.getEntry(givenKey) != null) {
                        if (dataSet.getEntry(givenKey) instanceof BooleanEntry) {
                            BooleanEntry entry = (BooleanEntry) dataSet.getEntry(givenKey);
                            if (entry.isValue() == givenValue) {
                                return dataSet.getEntry(searchingKey);
                            }
                        }
                    }
                }
            }
        }
        return null;
    }

    public IEntry getDataSet(String searchingKey, String givenKey, Number givenValue) {
        for (DataSet dataSet : dataSets) {
            for (String key : dataSet.getEntries().keySet()) {
                if (key.equals(searchingKey)) {
                    if (dataSet.getEntry(givenKey) != null) {
                        if (givenValue instanceof Long && dataSet.getEntry(givenKey) instanceof LongEntry) {
                            LongEntry entry = (LongEntry) dataSet.getEntry(givenKey);
                            if (entry.getValue() == givenValue.longValue()) {
                                return dataSet.getEntry(searchingKey);
                            }
                        } else if (givenValue instanceof Double && dataSet.getEntry(givenKey) instanceof DoubleEntry) {
                            DoubleEntry entry = (DoubleEntry) dataSet.getEntry(givenKey);
                            if (entry.getValue() == givenValue.doubleValue()) {
                                return dataSet.getEntry(searchingKey);
                            }
                        } else if (givenValue instanceof Float && dataSet.getEntry(givenKey) instanceof FloatEntry) {
                            FloatEntry entry = (FloatEntry) dataSet.getEntry(givenKey);
                            if (entry.getValue() == givenValue.floatValue()) {
                                return dataSet.getEntry(searchingKey);
                            }
                        } else if (givenValue instanceof Integer && dataSet.getEntry(givenKey) instanceof IntegerEntry) {
                            IntegerEntry entry = (IntegerEntry) dataSet.getEntry(givenKey);
                            if (entry.getValue() == givenValue.intValue()) {
                                return dataSet.getEntry(searchingKey);
                            }
                        } else if (givenValue instanceof Byte && dataSet.getEntry(givenKey) instanceof ByteEntry) {
                            ByteEntry entry = (ByteEntry) dataSet.getEntry(givenKey);
                            if (entry.getValue() == givenValue.byteValue()) {
                                return dataSet.getEntry(searchingKey);
                            }
                        } else if (givenValue instanceof Short && dataSet.getEntry(givenKey) instanceof ShortEntry) {
                            ShortEntry entry = (ShortEntry) dataSet.getEntry(givenKey);
                            if (entry.getValue() == givenValue.shortValue()) {
                                return dataSet.getEntry(searchingKey);
                            }
                        }

                        return dataSet.getEntry(searchingKey);
                    }
                }
            }
        }
        return null;
    }


        private void get(Client client, Document document) {

            String[] args = document.getString("query").trim().split(" ");
            UUID id = UUID.fromString(document.getString("id"));

            String searchingKey = args[1];
            String[] given = args[5].split("=");
            String tableName = args[3];

            String givenKey;
            String givenValue;

            if (searchingKey == null || given.length == 0 || tableName == null) {
                sendError(client, id, "A wrong syntax in query.");
                return;
            } else {
                givenKey = given[0];
                givenValue = given[1];
            }

            if (this.tables.containsKey(tableName)) {
                Table table = this.tables.get(tableName);

                EntryType entryType = EntryType.getByName(document.getString("type"));

                IEntry returnValue = null;

                if (entryType == null) return;

                if (entryType == EntryType.STRING) {
                    returnValue = table.getDataSet(searchingKey, givenKey, givenValue);
                } else if (entryType == EntryType.INTEGER) {
                    returnValue = table.getDataSet(searchingKey, givenKey, Integer.parseInt(givenValue));
                } else if (entryType == EntryType.SHORT) {
                    returnValue = table.getDataSet(searchingKey, givenKey, Short.parseShort(givenValue));
                } else if (entryType == EntryType.FLOAT) {
                    returnValue = table.getDataSet(searchingKey, givenKey, Float.parseFloat(givenValue));
                } else if (entryType == EntryType.BYTE) {
                    returnValue = table.getDataSet(searchingKey, givenKey, Byte.parseByte(givenValue));
                } else if (entryType == EntryType.DOUBLE) {
                    returnValue = table.getDataSet(searchingKey, givenKey, Double.parseDouble(givenValue));
                } else if (entryType == EntryType.LONG) {
                    returnValue = table.getDataSet(searchingKey, givenKey, Long.parseLong(givenValue));
                } else if (entryType == EntryType.BOOLEAN) {
                    returnValue = table.getDataSet(searchingKey, givenKey, Boolean.parseBoolean(givenValue));
                } else if (entryType == EntryType.CHARACTER) {
                    returnValue = table.getDataSet(searchingKey, givenKey, givenValue.charAt(0));
                }

                if (returnValue == null) return;

                switch (returnValue.getType()) {
                    case ARRAY:
                        ArrayEntry arrayEntry = (ArrayEntry) returnValue;
                        client.write(new Document().addString("id", id.toString()).addString("type", returnValue.getType().getName()).addString("arrayType", arrayEntry.getEntryType().getName()).addArray("value", arrayEntry).create());
                        break;

                    case INTEGER:
                        IntegerEntry integerEntry = (IntegerEntry) returnValue;
                        client.write(new Document().addString("id", id.toString()).addString("type", returnValue.getType().getName()).addNumber("value", integerEntry.getValue()).create());
                        break;

                    case LONG:
                        LongEntry longEntry = (LongEntry) returnValue;
                        client.write(new Document().addString("id", id.toString()).addString("type", returnValue.getType().getName()).addNumber("value", longEntry.getValue()).create());
                        break;

                    case BYTE:
                        ByteEntry byteEntry = (ByteEntry) returnValue;
                        client.write(new Document().addString("id", id.toString()).addString("type", returnValue.getType().getName()).addNumber("value", byteEntry.getValue()).create());
                        break;

                    case DOUBLE:
                        DoubleEntry doubleEntry = (DoubleEntry) returnValue;
                        client.write(new Document().addString("id", id.toString()).addString("type", returnValue.getType().getName()).addNumber("value", doubleEntry.getValue()).create());
                        break;

                    case FLOAT:
                        FloatEntry floatEntry = (FloatEntry) returnValue;
                        client.write(new Document().addString("id", id.toString()).addString("type", returnValue.getType().getName()).addNumber("value", floatEntry.getValue()).create());
                        break;

                    case SHORT:
                        ShortEntry shortEntry = (ShortEntry) returnValue;
                        client.write(new Document().addString("id", id.toString()).addString("type", returnValue.getType().getName()).addNumber("value", shortEntry.getValue()).create());
                        break;

                    case STRING:
                        StringEntry stringEntry = (StringEntry) returnValue;
                        client.write(new Document().addString("id", id.toString()).addString("type", returnValue.getType().getName()).addString("value", stringEntry.getValue()).create());
                        break;

                    case BOOLEAN:
                        BooleanEntry booleanEntry = (BooleanEntry) returnValue;
                        client.write(new Document().addString("id", id.toString()).addString("type", returnValue.getType().getName()).addBoolean("value", booleanEntry.isValue()).create());
                        break;
                }
            } else {
                sendError(client, id, ErrorMessages.TABLE_COULD_NOT_BE_FOUND);
            }
        }






        public class Client extends Thread {

            private boolean alive;

            @Getter private UUID uniqueId;
            @Getter private Socket socket;
            @Getter private User user;
            @Getter private ClientType clientType;

            public Client(Socket socket) {
                this.socket = socket;
                alive = true;
                setDaemon(true);
                start();
            }

            @Override
            public void run() {
                try {
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                    String message;

                    try {
                        while ((message = bufferedReader.readLine()) != null) {

                            JsonParser jsonParser = new JsonParser();
                            JsonElement element = jsonParser.parse(message);
                            if (element instanceof JsonObject) {
                                JsonObject jsonObject = (JsonObject) element;

                                if (this.user != null) {
                                    if(BackData.getInstance().getNetworkManager().getClients().containsKey(UUID.fromString(jsonObject.get("id").getAsString()))) {
                                        MessageReceivedEvent event = new MessageReceivedEvent(this, jsonObject);
                                        BackData.getInstance().getEventManager().fireEvent(event);

                                        if (event.isCancelled()) return;

                                        if(jsonObject.get("id").getAsString().equalsIgnoreCase("pipeline")) {

                                        } else {
                                            BackData.getInstance().getDatabaseManager().handleRequest(this, jsonObject);
                                        }
                                    } else {
                                        write(new Document().addString("id", jsonObject.get("id").getAsString()).addString("type", EntryType.ERROR.getName()).addString("value", "Could not identify you.").create());
                                    }
                                } else {
                                    verify(jsonObject);
                                }
                            }
                        }
                    } catch (Exception ignored) {
                    } finally {
                        BackData.getInstance().getNetworkManager().unregisterClient(uniqueId);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            /**
             * @param jsonObject
             */
            public void write(JsonObject jsonObject) {

                MessageSendEvent event = new MessageSendEvent(this, jsonObject);
                BackData.getInstance().getEventManager().fireEvent(event);
                if (event.isCancelled()) return;

                try {
                    PrintStream printStream = new PrintStream(socket.getOutputStream());
                    printStream.println(jsonObject.toString());
                    printStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            public void verify(JsonObject jsonObject) {
                String username = jsonObject.get("username").getAsString();
                String password = jsonObject.get("password").getAsString();

                User user = BackData.getInstance().getUserManager().login(username, password);
                if (user != null) {
                    this.user = user;
                    this.clientType = ClientType.getByName(jsonObject.get("type").getAsString());

                    this.uniqueId = UUID.randomUUID();
                    BackData.getInstance().getNetworkManager().getClients().put(this.uniqueId, this);
                    write(new Document().addString("id", uniqueId.toString()).addBoolean("response", true).addString("value", "You successfully logged in").create());
                } else {
                    write(new Document().addBoolean("response", false).addString("value", "Wrong username or password").create());
                    alive = false;
                }
            }

            public Socket getSocket() {
                return socket;
            }

            public UUID getUniqueId() {
                return uniqueId;
            }
        }